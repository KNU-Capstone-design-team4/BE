import os
import asyncio
from openai import AsyncOpenAI
import numpy as np
from dotenv import load_dotenv

# .env 파일에서 환경 변수 로드
load_dotenv()

client = AsyncOpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# 1단계에서 만든 '팁 목록'을 여기에 붙여넣습니다.
# 여러 줄 문자열로 만드는 것이 편리합니다.
TIP_LIST = [
    "1.**(초과근무 합의)** 법정근로시간(주 40시간)을 초과하여 근무하려면, 반드시 근로자와의 서면 합의가 필요합니다. 구두 합의는 추후 분쟁의 소지가 될 수 있습니다.",
    "2.** (청소년 근로)** 만 18세 미만 청소년의 법정근로시간은 하루 7시간, 주 35시간을 초과할 수 없으며, 본인이 동의해도 연장근로는 주 5시간까지만 가능합니다.",
    "3.** (휴일근로수당)** 휴일에 근무했다면 반드시 가산수당을 받아야 합니다. 8시간 이내 근무는 통상임금의 1.5배, 8시간을 초과한 근무는 2배를 지급받아야 합니다.",
    "4.** (야간근로수당)** 오후 10시부터 다음 날 오전 6시 사이에 근무했다면, 통상임금의 50%를 야간근로수당으로 추가 지급받아야 합니다.",
    "5.** (수당 중복지급)** 만약 휴일에 야간 근무를 했다면, 휴일근로수당(1.5배)과 야간근로수당(0.5배)이 중복으로 적용되어 통상임금의 2배를 받을 수 있습니다.",
    "6.** (주휴수당 조건)** 주휴수당은 '1주 소정근로시간 15시간 이상'과 '1주 개근'이라는 두 가지 조건을 모두 충족해야 발생합니다.",
    "7.** (단기 근로자 주휴수당)** 계약 기간이 1주일이라도, 주 15시간 이상 일하고 개근했다면 계약 종료와 별개로 주휴수당을 지급받을 수 있습니다. 다음 주 근무 여부는 상관없습니다.",
    "8.** (계약서 작성 시점)** 모든 근로계약서는 반드시 업무를 시작하기 전에 작성해야 하며, 작성 후 1부를 근로자에게 즉시 교부하는 것이 법적 의무입니다.",
    "9.** (계약서 미작성 벌금)** 근로계약서를 서면으로 작성하고 교부하지 않은 경우, 사업주는 500만원 이하의 벌금에 처해질 수 있습니다.",
    "10.** (근로조건 변경)** 임금, 근로시간 등 중요한 근로조건이 변경될 경우, 구두 합의만으로는 부족하며 반드시 변경된 내용을 서면으로 명시하여 다시 교부해야 합니다.",
    "11.** (단시간 근로자 계약서)** 아르바이트처럼 근무 요일이나 시간이 유동적인 경우, \"월, 수, 금, 14:00~18:00\"와 같이 근로일과 근로일별 근로시간을 반드시 구체적으로 명시해야 합니다.",
    "12.** (휴게시간 명시)** 휴게시간은 임금에 포함되지 않는 무급 시간이 원칙입니다. 따라서 계약서에 휴게시간을 명확히 기재해야 총 근로시간 및 임금 계산에 대한 오해를 막을 수 있습니다.",
    "13.** (휴게시간 법적 기준)** 근로시간이 4시간이면 30분 이상, 8시간이면 1시간 이상의 휴게시간을 '근로시간 도중에' 부여해야 합니다. 업무 시작 전이나 종료 후에 부여하는 것은 위법입니다.",
    "14.** (퇴직금 연봉 포함 금지)** 월급이나 연봉에 퇴직금을 포함하여 지급하는 계약은 근로기준법상 불법이며 무효입니다. 퇴직금은 반드시 퇴직 시점에 별도로 정산받아야 합니다.",
    "15.** (포괄임금제 유의사항)** 연장·야간수당 등을 미리 월급에 포함하는 포괄임금제 계약은 가능하지만, 실제 발생한 수당이 약정된 수당보다 많을 경우 차액을 추가로 지급해야 합니다.",
    "16.** (공휴일 유급휴일)** 2022년부터 사업장 규모와 상관없이 모든 근로자는 '빨간 날'(관공서 공휴일)을 유급휴일로 보장받아야 합니다.",
    "17.** (대체휴일 적용)** 공휴일이 주말과 겹치는 경우 발생하는 대체공휴일 역시 모든 사업장에서 유급휴일로 보장해야 합니다.",
    "18.** (휴일 조항 명시)** 근로계약서에는 '주휴일'이 무슨 요일인지, '공휴일'을 유급으로 보장하는지 등 휴일에 관한 사항을 반드시 포함해야 합니다.",
    "19.** (5인 미만 사업장 예외)** 연장·야간·휴일근로 가산수당, 연차유급휴가 등의 일부 규정은 상시 근로자 5인 미만 사업장에는 적용되지 않을 수 있으니 확인이 필요합니다.",
    "20.** (벌금과 별개로 임금 지급 의무)** 사업주가 근로기준법 위반으로 벌금을 내더라도, 근로자에게 지급해야 할 주휴수당, 가산수당 등의 임금 지급 의무는 사라지지 않습니다."
    "21.**(최저시급)2025년을 기준으로 최저시급은 10030원입니다. 이를 지키지 않을 경우, 5년 이하의 징역에 처할 수 있습니다."
]
# 1단계에서 만든 '질문 세트'를 리스트로 만듭니다.

QUESTION_LIST = [
    # --- 팁에 있는 내용을 직접 묻는 질문 ---
    "나는 최저시급을 5000원으로 해서 아르바이트를 할거야",
    "법정 근로 시간은 무엇인가요?",
    "주 최대 근로시간은 몇 시간인가요?",
    "휴일 근로가 무엇인가요?",
    "야간근로란 무엇인가요?",
    "유급휴일(주휴일)은 무엇인가요?",
    "주휴수당을 받기 위한 조건은 무엇인가요?",
    "계약기간 1주일(7일간)인 아르바이트생의 경우 1주간(7일간) 일하고 계약기간이 종료했는데 주휴수당을 받을 수 있나요?",
    "만 18세 미만 청소년이 본인 동의 하에 할 수 있는 연장근로는 주 몇 시간까지인가요?",
    "언제 근로계약서를 작성해서 근로자에게 주어야 하나요?",
    "근로계약서 내용이 바뀌면 새로 써야 하나요?",
    "야간근로수당은 통상임금의 몇 퍼센트를 추가로 지급받아야 하나요?",
    "휴게 시간은 얼마나 보장해야 하나요?",
    "단시간 근로자는 근무 요일을 모두 적어야 하나요?",
    "대체공휴일도 유급휴일인가요?",
    "공휴일(빨간 날)에도 쉬게 해줘야 하나요?",
    "휴일에 관한 사항은 계약서에 적어야 하나요?",

    # --- 팁 내용을 조합/추론해야 하는 질문 ---
    "주휴일에 밤 11시부터 새벽 2시까지 3시간 일했습니다. 가산수당을 얼마나 받아야 하나요?",
    "입사할 때 연봉에 퇴직금을 포함하기로 구두로 합의하고 아직 근로계약서를 쓰지 않았는데, 법적으로 문제가 없나요?",
    "16세 아르바이트생이 평일에 하루 7시간씩 5일 일하고, 주말에 추가로 8시간 더 일하기로 했습니다. 이 계약은 법적으로 가능한가요?",
    "월요일에 4시간, 수요일에 4시간, 금요일에 4시간 일하는 아르바이트생입니다. 주휴수당을 받을 수 있을까요?",
    "계약서에 근무시간이 오전 9시부터 오후 6시까지로 되어있고, 휴게시간이 30분으로 명시되어 있습니다. 이 계약은 문제가 없나요?",
    "사장님이 근로계약서를 쓰긴 했는데, 한 부만 만들어서 회사에서만 보관하고 저에게는 주지 않았습니다. 이건 괜찮은 건가요?",
    "작년(2023년) 3월 1일에 4시간 일했습니다. 추가 수당을 받을 수 있나요? (공휴일 유급휴일 의무화 시점 고려 필요)",
    "제 연봉에는 모든 수당이 포함된 포괄임금제라고 합니다. 이 경우 제가 야간이나 휴일에 일해도 추가 수당을 못 받는 게 맞나요?",
    "딱 5일만 일하는 단기 아르바이트인데, 하루에 4시간씩 일하기로 했습니다. 주휴수당을 받을 수 있나요?",
    "카페에서 아르바이트를 하는데, 사장님이 손님 없을 때는 일찍 가도 된다고 해서 출퇴근 시간이 매일 다릅니다. 계약서에는 '주 5일, 일 4시간'이라고만 적혀있는데, 문제가 될 수 있나요?",

    # --- 유사하지만 표현이 다른 질문 ---
    "토요일을 약정 휴일로 정한 경우, 토요일에 일하면 가산 수당을 받아야 합니까?",
    "저희 회사의 약정 휴일이 토요일인데, 토요일에 근무할 때 가산 수당을 받을 수 있나요?",
    "매주 정해진 근무일에 모두 출근하지 못하면 주휴수당을 받을 수 없나요?",
    "하루 결근했는데, 주휴수당을 받을 수 없나요?",
    "야간 근로의 시작 시간은 몇 시부터인가요?",
    "야간 근로가 끝나는 시간은 몇 시부터인가요?",
    "근로자에게 계약서를 언제 교부해야 하나요?",
    "근로자에게 계약서를 언제 주어야 하나요?",
    "근로시간이 4시간일 때 최소 휴게 보장 시간은 어떻게 되나요?",
    "4시간 동안 근로할 경우, 최소 휴게 보장 시간은 몇 시간인가요?",
    "계약 기간이 7일인 단기 근로자도 주휴수당을 받을 수 있는지 궁금합니다.",
    "일주일간 계약한 단기 근로자는 주휴수당을 받을 수 있나요?",

    # 1. 해고 절차 관련 (팁 리스트에 없음)
    "사장님이 갑자기 내일부터 나오지 말라고 하는데, 부당해고 아닌가요?",
    
    # 2. 퇴직금 '지급 기한' 관련 (팁 리스트에 없음)
    "회사를 그만뒀는데, 퇴직금은 며칠 안에 받아야 법적으로 맞는 건가요?",
    
    # 3. 4대 보험 관련 (팁 리스트에 없음)
    "4대 보험은 아르바이트생도 의무적으로 가입해야 하나요?",
    
    # 4. 연차유급휴가 계산 관련 (팁 리스트에 없음)
    "입사한 지 6개월 됐는데, 연차휴가는 몇 개나 쓸 수 있나요?",
    
    # 5. 직장 내 괴롭힘 (팁 리스트에 없음)
    "직장 상사의 갑질이 너무 심한데, 어디에 신고할 수 있나요?",
    
    # 6. 산업재해 (산재) 관련 (팁 리스트에 없음)
    "일하다가 창고에서 넘어져 다쳤는데, 산재 처리 절차가 궁금합니다.",
    
    # 7. 사직서 제출/통보 기간 관련 (팁 리스트에 없음)
    "제가 회사를 그만두고 싶으면, 최소 몇 주 전에는 미리 알려야 하나요?",
    
    # 8. 출산휴가/육아휴직 관련 (팁 리스트에 없음)
    "출산휴가는 총 며칠을 사용할 수 있고, 유급인가요 무급인가요?",
    
    # 9. 프리랜서 계약 관련 (팁 리스트에 없음)
    "프리랜서로 계약했는데, 저도 근로기준법의 보호를 받을 수 있나요?",
    
    # 10. 임금체불 신고 절차 관련 (팁 리스트에 없음)
    "월급을 계속 안 주는데, 노동청에 신고하는 구체적인 방법을 알려주세요."

]



#"1주에 최대 몇 시간을 소정 근로시간으로 일할 수 있습니까?",
#    "소정 근로시간이 궁금해요!",
#   "야간 근로 시 통상 임금의 몇 %를 추가로 받아야 합니까?",
#   "오후 10시부터 오전 6시 사이에 일하면 임금은 얼마나 할증되어야 하나요?",
#   "법정휴일이나 약정휴일에 일하면 추가 수당을 받을 수 있나요?",
#   "휴일에 일하면 어떤 추가 수당을 받나요?",
#   "새해가 되어서 최저 임금이 인상했는데, 근로계약서를 다시 작성해야하나요?",
#   "연봉 협상 후, 근로계약서를 다시 작성해야하나요?"'''

# --- 🤖 제로샷 테스트 함수 ---
async def run_zero_shot_test(question: str):
    """참고 자료 없이, AI의 기본 지식만으로 답변하게 합니다."""
    system_prompt = "당신은 계약법 전문가입니다. 사용자의 질문에 간결하고 정확하게 답변하세요."

    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        temperature=0,
    )
    return response.choices[0].message.content

'''
# --- 👨‍🏫 퓨샷 테스트 함수 ---
async def run_few_shot_test(question: str, tips: str):
    """'팁 목록'을 참고 자료로 제공하여, 이를 기반으로만 답변하게 합니다."""
    system_prompt = f"""
    당신은 주어진 '참고 자료'만을 기반으로 사용자의 질문에 답변하는 AI입니다.
    자료에 없는 내용은 절대로 언급하지 말고, '자료에 없는 내용입니다'라고 답변하세요.

    --- 참고 자료 ---
    {tips}
    -----------------
    """

    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        temperature=0,
    )
    return response.choices[0].message.content

# --- 🚀 메인 실행 함수 ---
async def main():
    print("===== 테스트를 시작합니다 =====")
    for i, question in enumerate(QUESTION_LIST):
        print(f"\n\n--- [질문 {i+1}: {question}] ---")

        # 제로샷 테스트 실행
        zero_shot_answer = await run_zero_shot_test(question)
        print(f"🤖 Zero-Shot 답변: {zero_shot_answer}")

        # 퓨샷 테스트 실행
        few_shot_answer = await run_few_shot_test(question, TIP_LIST)
        print(f"👨‍🏫 Few-Shot 답변: {few_shot_answer}")

    print("\n\n===== 모든 테스트가 완료되었습니다. =====")


if __name__ == "__main__":
    asyncio.run(main()) '''

# --- 검색 관련 함수 ---
async def get_embedding(text):
    response = await client.embeddings.create(model="text-embedding-3-small", input=text)
    return response.data[0].embedding

# ⚙️ [변경점 1] 검색 함수가 팁과 함께 '최고 유사도 점수'도 반환하도록 수정
async def find_top_relevant_tips(question, tip_embeddings, top_n=3):
    """질문과 가장 관련성 높은 상위 N개의 팁과, 그 중 최고 유사도 점수를 반환합니다."""
    question_embedding = await get_embedding(question)
    similarities = [np.dot(question_embedding, tip_embedding) for tip_embedding in tip_embeddings]
    
    top_indices = np.argsort(similarities)[-top_n:][::-1]
    
    # 최고 유사도 점수
    top_score = similarities[top_indices[0]]
    
    relevant_tips_str = "\n\n".join([TIP_LIST[i] for i in top_indices])
    
    return relevant_tips_str, top_score # 2개의 값을 반환

# --- RAG 함수 (변경 없음) ---
async def run_advanced_rag_test(question: str, relevant_tips: str):
    # ... (기존 코드와 동일)
    system_prompt = f"""
    당신은 주어진 '참고 자료'만을 기반으로 답변하는 AI 노무사입니다. 다음 규칙을 엄격히 따르세요...
    1.  **[생각 단계]:** 먼저 사용자의 질문을 분석하고, '참고 자료'에서 관련된 모든 조항을 찾습니다. 이 조항들을 어떻게 조합해야 질문에 답할 수 있을지 단계별로 논리를 구성합니다.
    2.  **[답변 생성 단계]:** '생각 단계'에서 정리된 논리를 바탕으로, 사용자에게 최종적인 답변을 친절하고 명확하게 생성합니다.
    3.  **[출처 명시 단계]:** 답변 내용의 근거가 된 '참고 자료'의 **'팁 번호'**를 문장 끝에 **(출처: 팁 N번)** 또는 **(출처: 팁 N번, M번)** 과 같은 형식으로 **반드시** 포함해야 합니다.
    """
    response = await client.chat.completions.create(model="gpt-4o", messages=[{"role": "system", "content": system_prompt}, {"role": "user", "content": question}], temperature=0)
    return response.choices[0].message.content

# --- 🚀 [변경점 2] 메인 실행 함수에 '유사도 임계값' 로직 추가 ---
async def main():
    print("===== 테스트를 시작합니다 =====")
    
    # 이 값을 조정하여 '관련성'의 기준을 설정합니다. (0.0 ~ 1.0)
    # 0.75 이상이면 꽤 관련성이 높다고 판단
    SIMILARITY_THRESHOLD = 0.1
    ##########################관련성 기준###########################

    print("팁 목록 임베딩을 생성합니다...")
    tip_embeddings = [await get_embedding(tip) for tip in TIP_LIST]
    print("임베딩 생성 완료!")

    for i, question in enumerate(QUESTION_LIST):
        print(f"\n\n--- [질문 {i+1}: {question}] ---")

        # 제로샷 테스트 실행
        zero_shot_answer = await run_zero_shot_test(question)
        print(f"🤖 Zero-Shot 답변: {zero_shot_answer}")

        # Advanced RAG 테스트 실행
        # 1. 관련 팁과 최고 점수를 함께 받아옴
        relevant_tips, top_score = await find_top_relevant_tips(question, tip_embeddings, top_n=3)
        
        # 2. 최고 점수가 임계값을 넘는지 확인
        if top_score >= SIMILARITY_THRESHOLD:
            # 임계값을 넘으면, AI에게 답변 생성 요청
            advanced_rag_answer = await run_advanced_rag_test(question, relevant_tips)
            print(f"👨‍🏫 Advanced RAG 답변: {advanced_rag_answer}")
        else:
            # 임계값을 넘지 못하면, 관련 팁이 없다고 판단하고 AI를 호출하지 않음
            print("👨‍🏫 Advanced RAG 답변: 관련된 팁을 찾을 수 없습니다.")

    print("\n\n===== 모든 테스트가 완료되었습니다. =====")


if __name__ == "__main__":
    asyncio.run(main())